name: QA Build & Deploy rewards
run-name: Deploying QA Branch ${{ inputs.branch }}

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch'
        required: true
        type: string
      unit_test:
        description: 'Unit Test'
        required: true
        default: 'false'
        type: choice
        options:
        - false
        - true
      app_db_lb_deploy:
        description: 'Quick sight DB expose'
        required: true
        default: 'false'
        type: choice
        options:
        - false
        - true
      rebuild_req:
        description: 'Force reinstall requirement'
        required: true
        default: 'false'
        type: choice
        options:
          - false
          - true
      deploy_env:
        description: 'Deploy Env'
        required: true
        default: 'qa'
        type: choice
        options:
        - qa
      app_cron_deploy:
        description: 'Should deploy cron?'
        required: true
        default: 'true'
        type: choice
        options:
          - true
          - false
      debug:
        description: 'Debug'
        required: true
        default: 'false'
        type: choice
        options:
          - false
          - true


  repository_dispatch:
    types: [ "QA Build & Deploy rewards" ]
    inputs:
      branch:
        description: 'Branch Name'
        required: true
        type: string
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - renew
        - destroy

      unit_test:
        description: 'Unit Test'
        required: true
        default: 'false'
        type: choice
        options:
        - false
        - true
      app_db_lb_deploy:
        description: 'Quick sight DB expose'
        required: true
        default: 'false'
        type: choice
        options:
        - false
      rebuild_req:
        description: 'Force reinstall requirement'
        required: true
        default: 'false'
        type: choice
        options:
          - false
          - true
      deploy_env:
        description: 'Deploy Env'
        required: true
        default: 'qa'
        type: choice
        options:
        - qa
      app_cron_deploy:
        description: 'Should deploy cron?'
        required: true
        default: 'true'
        type: choice
        options:
          - true
          - false
      debug:
        description: 'Debug'
        required: true
        default: 'false'
        type: choice
        options:
          - false
          - true
            
      run_collectstatic:
        description: 'should run collectstatic'
        required: true
        default: 'true'
        type: choice
        options:
          - true
          - false
            
      run_migration:
        description: 'should run migration'
        required: true
        default: 'true'
        type: choice
        options:
          - true
          - false

env:
  APPLICATION_NAME: rewards
  APP_NAME: rewards
  APP_IMAGE_REPOSITORY: 'qa/ygg/rewards/backend-app'
  NGINX_IMAGE_REPOSITORY: 'qa/ygg/rewards/backend-nginx'
  ECR_REGISTRY: '420360167813'
  ECR_REGION: 'me-central-1'
  VAULT_ADDRESS: ${{ secrets.VAULT_ADDRESS }}
  PRODUCT_TEAM: rewards
  ACTION: deploy
  JIRA_ID: ${{ inputs.branch || github.event.client_payload.branch }}
  UNIT_TEST: ${{ inputs.unit_test || github.event.client_payload.unit_test || false }}
  APP_DB_LB_DEPLOY: ${{ inputs.app_db_lb_deploy || github.event.client_payload.app_db_lb_deploy || false }}
  APP_CRON_DEPLOY: ${{ inputs.app_cron_deploy || github.event.client_payload.app_cron_deploy || false }}
  QA_DEPLOY_ENV: ${{ inputs.deploy_env || github.event.client_payload.deploy_env || 'qa' }}
  DEBUG: ${{ inputs.debug || github.event.client_payload.debug || false }}
  NGINX_BASE_IMAGE: '420360167813.dkr.ecr.me-central-1.amazonaws.com/qa/ygg/nginx:1.16.1-1'
  COLLECTSTATIC_RUN: ${{ inputs.run_collectstatic || github.event.client_payload.run_collectstatic || true }}
  MIGRATION_RUN: ${{ inputs.run_migration || github.event.client_payload.run_migration || true }}
  
jobs:
  deploy-app-nginx:
    name: Deploy
    runs-on:
      group: default
      labels: self-hosted
    steps:
     - name: Checkout Code for deploy
       uses: actions/checkout@v3.0.2
       with:
         ref: ${{ inputs.branch || github.event.client_payload.branch }}

     - name: Setup Dynamic env variables
       run: echo "IMAGE_TAG=$(git rev-parse --short HEAD)-${GITHUB_RUN_ID}-qa" >> $GITHUB_ENV

     - name: Setup QA env variable
       run: |
        echo "KUBERNETES_HOST=${{ secrets.YGG_ME_CENTRAL_1_QA_KUBERNETES_HOST }}" >> $GITHUB_ENV
        echo "KUBERNETES_CLUSTER_CA_CERT=${{ secrets.YGG_ME_CENTRAL_1_QA_KUBERNETES_CLUSTER_CA_CERT }}" >> $GITHUB_ENV
        echo "KUBERNETES_TOKEN=${{ secrets.YGG_ME_CENTRAL_1_QA_KUBERNETES_TOKEN }}" >> $GITHUB_ENV
        echo "DOMAIN=${{ secrets.QA_DOMAIN }}" >> $GITHUB_ENV
        echo "CERTIFICATE_ARN=${{ secrets.YGG_ME_CENTRAL_1_QA_CERTIFICATE_ARN }}" >> $GITHUB_ENV
        echo "WAF_ARN=${{ secrets.YGG_ME_CENTRAL_1_QA_WAF_ARN }}" >> $GITHUB_ENV
        echo "ALB_ACCESS_LOG_BUCKET=${{ secrets.YGG_ME_CENTRAL_1_QA_ALB_ACCESS_LOG_BUCKET }}" >> $GITHUB_ENV

     - name: Checkout template
       uses: actions/checkout@v3
       with:
          repository: yougotagift/devops-cd
          ref: 'main'
          ssh-key: ${{ secrets.DEVOPS_CD_DEPLOYMENT_KEY }}
          path: devops-cd

     - name: Search and replace values
       run: |
        cd devops-cd
        mkdir -p build/${{ env.APP_NAME }}
        cp application/* build/${{ env.APP_NAME }}
        cp ../deployment/values/${{ env.APP_NAME }}/qa/helm/* build/${{ env.APP_NAME }}
        cp ../deployment/values/${{ env.APP_NAME }}/qa/terraform/* build/${{ env.APP_NAME }}
        
        find ./ -type f -exec sed -i 's/\[ENVIRONMENT\]/qa/g' '{}' \;
        find ./ -type f -exec sed -i 's/\[KUBERNETES_TOKEN\]/${{ env.KUBERNETES_TOKEN }}/g' '{}' \;
        find ./ -type f -exec sed -i 's/\[VAULT_TOKEN\]/${{ secrets.VAULT_TOKEN }}/g' '{}' \;
        find ./ -type f -exec sed -i 's/\[BUILD_TAG\]/${{ env.IMAGE_TAG }}/g' '{}' \;
        find ./ -type f -exec sed -i 's/\[NGINX_BUILD_TAG\]/${{ env.IMAGE_TAG }}/g' '{}' \;
        find ./ -type f -exec sed -i 's/\[IMAGE_PULL_SECRET\]/${{ env.IMAGE_PULL_SECRET }}/g' '{}' \;
        find ./ -type f -exec sed -i 's/\[APPLICATION_NAME\]/${{ env.APPLICATION_NAME }}/g' '{}' \;
        find ./ -type f -exec sed -i 's/\[KUBERNETES_CLUSTER_CA_CERT\]/${{ env.KUBERNETES_CLUSTER_CA_CERT }}/g' '{}' \;
        find ./ -type f -exec sed -i 's!\[VAULT_ADDRESS\]!${{ env.VAULT_ADDRESS }}!g' '{}' \;
        find ./ -type f -exec sed -i 's!\[KUBERNETES_HOST\]!${{ env.KUBERNETES_HOST }}!g' '{}' \;
        find ./ -type f -exec sed -i 's!\[DOMAIN\]!${{ env.DOMAIN }}!g' '{}' \;
        find ./ -type f -exec sed -i 's!\[CERTIFICATE_ARN\]!${{ env.CERTIFICATE_ARN }}!g' '{}' \;
        find ./ -type f -exec sed -i 's!\[WAF_ARN\]!${{ env.WAF_ARN }}!g' '{}' \;
        find ./ -type f -exec sed -i 's!\[ALB_ACCESS_LOG_BUCKET\]!${{ env.ALB_ACCESS_LOG_BUCKET }}!g' '{}' \;
        find ./ -type f -exec sed -i 's/\[AWS_ACCESS_KEY_ID\]/${{ secrets.TERRAFORM_QA_AWS_ACCESS_KEY_ID }}/g' '{}' \;
        find ./ -type f -exec sed -i 's/\[AWS_ACCESS_SECRET_KEY\]/${{ secrets.TERRAFORM_QA_AWS_ACCESS_SECRET_KEY }}/g' '{}' \;

        cd build/${{ env.APP_NAME }}/ > /dev/null

        find ./ -type f -exec sed -i "s/\[JIRA_ID\]/${{needs.initialize.outputs.jira_id}}/g" {} \;

        if [[ ${{ env.ACTION }} == "destroy" ]] ; then
          sed -i "s/\[APP_DEPLOY\]/false/g" *.auto.tfvars
        else
          sed -i "s/\[APP_DEPLOY\]/true/g" *.auto.tfvars
        fi

        if [[ ${{ env.UNIT_TEST }} == "true" ]] ; then
          sed -i "s/\[APP_UNIT_TEST_DEPLOY\]/true/g" *.auto.tfvars
        else
          sed -i "s/\[APP_UNIT_TEST_DEPLOY\]/false/g" *.auto.tfvars
        fi

        if [[ ${{ env.APP_DB_LB_DEPLOY }} == "true" ]] ; then
          sed -i "s/\[APP_DB_LB_DEPLOY\]/true/g" *.auto.tfvars *.yaml
        else
          sed -i "s/\[APP_DB_LB_DEPLOY\]/false/g" *.auto.tfvars *.yaml
        fi

        if [[ ${{ env.QA_DEPLOY_ENV }} == "automation" ]] ; then
          sed -i "s/\[QA_DEPLOY_ENV\]/automation/g" *.yaml
        else
          sed -i "s/\[QA_DEPLOY_ENV\]/qa/g" *.yaml
        fi

        if [[ ${{ env.APP_CRON_DEPLOY }} == "true" ]] ; then
          sed -i "s/\[APP_CRON_DEPLOY\]/true/g" *.auto.tfvars
        else
          sed -i "s/\[APP_CRON_DEPLOY\]/false/g" *.auto.tfvars
        fi
         
        if [[ ${{ env.COLLECTSTATIC_RUN }} == "true" ]] ; then
          sed -i "s/\[COLLECTSTATIC_RUN\]/true/g" *.auto.tfvars *.yaml
        else
          sed -i "s/\[COLLECTSTATIC_RUN\]/false/g" *.auto.tfvars *.yaml
        fi

        if [[ ${{ env.MIGRATION_RUN }} == "true" ]] ; then
          sed -i "s/\[MIGRATION_RUN\]/true/g" *.auto.tfvars *.yaml
        else
          sed -i "s/\[MIGRATION_RUN\]/false/g" *.auto.tfvars *.yaml
        fi
         
        cd - > /dev/null

     - name: Installing Terraform
       uses: hashicorp/setup-terraform@v2
       with:
         terraform_version: 1.6.6

     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v2.2.0
       with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ECR_PUSH }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_ECR_PUSH }}
        aws-region: us-east-1

     - name: Login to Amazon ECR helm registry
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1.6.0
       with:
         registries: 459037613883
         registry-type: private
         region: us-east-1

     - name: Deploying application
       env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID_ECR_PUSH }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET_ECR_PUSH }}
          VAULT_ADDRESS: ${{ secrets.VAULT_ADDRESS }}
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
       run: |
         cd devops-cd/build/${{ env.APP_NAME }}

         if [[ ${{ env.DEBUG }} == "true" ]] ; then
          ls -lt
          cat *.tfvars
          cat *.tf
          cat *.yaml
         fi

         aws ecr get-login-password --region us-east-1 | helm registry login --username AWS --password-stdin 459037613883.dkr.ecr.us-east-1.amazonaws.com
         terraform version
         terraform init
         terraform apply -auto-approve
         
         if [[ ${{ env.ACTION }} == "deploy" ]];then
           retry=1
           while [[ $status -ne 200 && $retry -le 30 ]]; do
             status=$(curl -I https://${{ env.APP_NAME }}-${{needs.initialize.outputs.jira_id}}.sit.yougotagift.co/ -w "%{http_code}" -s -o /dev/null)
             sleep 1;
             ((retry++));
           done
         fi

     - name: Output
       env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
       run: |
         URL="https://${{ env.APP_NAME }}-${{needs.initialize.outputs.jira_id}}.sit.yougotagift.co"
         USER="@$( echo $GITHUB_CONTEXT | jq '.triggering_actor' | sed 's/"//g')"
          
         echo "**URL**: $URL" >> $GITHUB_STEP_SUMMARY
         if [[ ${{ env.APP_DB_LB_DEPLOY }} == "true" ]];then
           echo -e "**Database Endpoint**: db.rewards-${{needs.initialize.outputs.jira_id}}.sit.yougotagift.co\n" >> $GITHUB_STEP_SUMMARY
         fi
         echo -e "**K8s dashboard**: https://k8s.sit.yougotagift.co\n" >> $GITHUB_STEP_SUMMARY
         echo "**Branch**: ${{needs.initialize.outputs.jira_id}}" >> $GITHUB_STEP_SUMMARY
         echo "**Action**: ${{ env.ACTION }}" >> $GITHUB_STEP_SUMMARY
         echo $'\n\n' >> $GITHUB_STEP_SUMMARY
         echo "**Triggered by** : $USER" >> $GITHUB_STEP_SUMMARY
